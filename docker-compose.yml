services:
  kafka:
    image: apache/kafka:latest
    hostname: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    ports:
      - "9092:9092"
    volumes:
      - ./kafka-logs:/tmp/kraft-combined-logs
    healthcheck:
      test: ["CMD", "/opt/kafka/bin/kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 5s
      timeout: 3s
      retries: 30

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
    ports:
      - "8080:8080"
    depends_on:
      - kafka

  producer:
    build:
      context: ./producer
      dockerfile: Dockerfile
    container_name: kafka-producer
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      TOPIC: jobs
      MSGS: 1000
    depends_on:
      kafka:
        condition: service_healthy

  postgres:
    image: postgres:17
    hostname: postgres
    environment:
      POSTGRES_USER: bench
      POSTGRES_PASSWORD: bench
      POSTGRES_DB: bench
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bench"]
      interval: 5s
      timeout: 3s
      retries: 30

  mri:
    build:
      context: ./rails-mri
      dockerfile: Dockerfile
    working_dir: /app
    volumes:
      - ./rails-mri:/app
    environment:
      RAILS_ENV: production
      DATABASE_URL: postgres://bench:bench@postgres:5432/bench
      KAFKA_BROKERS: kafka:29092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    # Garante que o schema exista antes de consumir
    command: >
      bash -lc "
        (bundle check || bundle install) &&
        DISABLE_DATABASE_ENVIRONMENT_CHECK=1 bundle exec rails db:drop db:create &&
        bin/rails db:prepare &&
        bundle exec karafka server
      "
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  console:
    build:
      context: ./rails-mri
      dockerfile: Dockerfile.dev
    working_dir: /app
    volumes:
      - ./rails-mri:/app
    environment:
      DATABASE_URL: postgres://bench:bench@postgres:5432/bench
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
